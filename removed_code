if (best_score == 1e9){
            for (auto& [dist, loc]: factory->rubble_vec){
                   return loc;
            }
            // Fallback for empty queue.
            for( auto& other_factory: my_factories){
                if (other_factory.ss->unit_id != factory->unit_id && !other_factory.ss->rubble_vec.empty()){
                    return assign_rubble( other_factory.ss, px, py);
                }
            }
        }
        
        
.def("update_factory_init_convolution", &CLux::update_factory_init_convolution)

void update_factory_init_convolution(py::array_t<int> _convolution){
        init_factory_convolution = numpy_to_vector(_convolution);
    }
    
    int factory_placement_value(int i, int j){
        if(rubble_around_factory.empty()){
            rubble_around_factory = get_rubble_around_factory_map(rubble);
        }

        for(const auto& [x, y]: iterate_mask({i,j},factory_mask) ){
            if( !valid(x,y) || ice[x][y] || ore[x][y]) return 1000000;
        }

        if (closest_factory(i,j, factories) <= 7) return 1000000;

        int ice_distance = 100;

        for(const auto& [x, y]: iterate_mask({i,j}, factory_close_mask)){
            if (valid(x,y)){
                ice_distance = min(ice_distance, ice_dist[x][y]);
            }
        }
        int conv_value = init_factory_convolution[i][j];

        return ice_distance * 2000 + conv_value;
    }        


    def reconstruct_action_queue(self, old_queue, random_dir):

        print("old ", old_queue, file=sys.stderr)

        if random_dir == 0:
            # standing still
            prefix = [[0, 0, 0, 0, 0, 1]]
        else:
            # move there and back
            prefix = [[0, random_dir, 0, 0, 0, 1], [0, opposite_dir_code[random_dir], 0, 0, 0, 1]]

        new_queue = prefix + old_queue
        if len(new_queue) > 20:
            self.temp_cut += 1
            print("cut/ ", self.temp_cut, file=sys.stderr)
            return [[0, random_dir, 0, 0, 0, 1]]

        return prefix + old_queue


   // Optimize on energy and turns
    std::pair<int, vector<Action>> shortest_path_with_oracle(
                                                    int t, Unit * unit, int x0, int y0, int x1, int y1, bool is_heavy){

        // TODO for hypercorrect ..should be triple< energy, len, turns. maybe shorter path exists with more turns.
        int daily_gain = is_heavy ? 10:1;  // energy gain for a day

        vvii distance_map(N, vii(N, MP(1e6,1e6)));  // map of (energy-distance, turn/segment) pairs
        auto visited = board(0);
        auto dir = board(0);

        priority_queue<tuple<int, int, int, int, int>, vector<tuple<int, int, int, int, int>>, greater<tuple<int, int, int, int, int>>> q;
        q.push(make_tuple(0,0,t,x0,y0));  // (energy-dist + turns/segment count , time(step), pos_x, pos_y)

        dir[x0][y0] = 0;  // holds direction from which it was visited 1-4.
        distance_map[x0][y0] = MP(0,0);

        bool found = false;

        while (!q.empty()) {

            const auto& [my_dist, my_turns, my_time, x, y] = q.top();
            q.pop();

            int move_time = my_time + 1;

            if (x==x1 && y==y1){
                found = true;
                break;
            }

            if(visited[x][y]) continue;
            visited[x][y] = 1;
            int my_dir = dir[x][y];

            FOR(code,1,4){
                 int nx = x + code_to_direction[code].xx;
                 int ny = y + code_to_direction[code].yy;
                 if (valid(nx,ny) && !visited[nx][ny]){

                    if (planned_paths[nx][ny].find(move_time) != planned_paths[nx][ny].end()){
                        continue;
                    }

                    int turns = (my_dir == code) ? my_turns : my_turns + 1;
                    int price = step_price(rubble[nx][ny], is_heavy);  // TODO!!! NO GO factories.
                    int dist = my_dist + price;

                    ii obj = MP(dist, turns);

                    if (obj < distance_map[nx][ny]){
                        distance_map[nx][ny] = obj;
                        dir[nx][ny] = code;
                        q.push(make_tuple(dist, turns, move_time, nx, ny));
                    }
                 }
            }
        }

        if (!found){
            vector<Action> vec;
            vec.PB(move_action(0, 1));
            return { (is_day(t+1) ? -daily_gain: 0) , vec};  // fallback on standing still action.
            cerr << "Impossible to find the shortest path without waiting or dying" << endl;
        }

        // return shortest_path( t, x0,  y0,  x1,  y1, is_heavy);

        // print_board(dir);
        // print_board(distance_map);

        int energy = distance_map[x1][y1].ff;
        //  turns = distance_map[x1][y1].ss;

        int x = x1;
        int y = y1;

        int len = 0;
        vector<int> path;

        while( dir[x][y] != 0){
            path.PB(dir[x][y]);
            const auto& p = code_to_direction[dir[x][y]];
            x = x - p.xx;
            y = y - p.yy;
            ++len;
        }
        reverse(path.begin(), path.end());

        // subtract energy gains if it is day.
        int t0 = t;
        REP(i,path.size()){
            energy -= is_day(++t0) ? daily_gain: 0;
        }

        vector<Action> actions;
        int start_segment = 0;
        path.PB(0);  // padding for last segment

        int path_size = path.size();
        FOR(i,1, path_size-1){
          if(path[i] != path[i-1]){
            actions.PB(move_action(path[i-1], i - start_segment));
            start_segment = i;
          }
        }

        // updates planned paths
        simulate_action_queue(*unit, actions, t);

        return {energy, actions};
    }






        void simulate_action_queue(const Unit& unit, const vector<Action>& action_queue, int t){
        int px = unit.px;
        int py = unit.py;
        // TODO count energy? maybe later
        for(const Action& action : action_queue){
            if (action.type == 0){  // move
                px += code_to_direction[action.dir_code].xx;
                py += code_to_direction[action.dir_code].yy;
            }
            auto result = planned_paths[px][py].insert(MP(++t, &unit));
            if (!result.ss){
                // TODO it probably still can happen as it depends on collision handling - currently in python code.
                cerr << "[ERROR] Unexpected collision detected in queue simulator." << endl;
            }
        }
    }

    void path_finder_preparation(){
        planned_paths.clear();
        planned_paths =
            vector<vector<unordered_map<int, const Unit*>>>(48, vector<unordered_map<int, const Unit*>>(48));

        for(auto& [key, unit] : units) {
            // TODO so far ignoring his units.
            if (unit.is_my){
               if( !unit.action_queue.empty()){
                    simulate_action_queue(unit, unit.action_queue, step);
               }
            }
        }
        // TODO: checking for nonsense would be useful here. as than it can be cancelled and redisigned.
        // TODO: Also possible to check for the energy, if it is enough to get home.

    }


    called here:

      divide_and_conquer_advanced();
        // TODO this project was postponed as it is not only about path, but also about n* waiting at mining place.
        // path_finder_preparation();
